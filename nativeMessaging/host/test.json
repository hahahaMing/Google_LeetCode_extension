{"text":"data","title":"1723. 完成所有工作的最短时间","qContent":"<p>给你一个整数数组 <code>jobs</code> ，其中 <code>jobs[i]</code> 是完成第 <code>i</code> 项工作要花费的时间。</p>\n\n<p>请你将这些工作分配给 <code>k</code> 位工人。所有工作都应该分配给工人，且每项工作只能分配给一位工人。工人的 <strong>工作时间</strong> 是完成分配给他们的所有工作花费时间的总和。请你设计一套最佳的工作分配方案，使工人的 <strong>最大工作时间</strong> 得以 <strong>最小化</strong> 。</p>\n\n<p>返回分配方案中尽可能 <strong>最小</strong> 的 <strong>最大工作时间</strong> 。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>jobs = [3,2,3], k = 3\n<strong>输出：</strong>3\n<strong>解释：</strong>给每位工人分配一项工作，最大工作时间是 3 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>jobs = [1,2,4,7,8], k = 2\n<strong>输出：</strong>11\n<strong>解释：</strong>按下述方式分配工作：\n1 号工人：1、2、8（工作时间 = 1 + 2 + 8 = 11）\n2 号工人：4、7（工作时间 = 4 + 7 = 11）\n最大工作时间是 11 。</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= k &lt;= jobs.length &lt;= 12</code></li>\n\t<li><code>1 &lt;= jobs[i] &lt;= 10<sup>7</sup></code></li>\n</ul>\n","codeText":"class Solution {\n  public:\n    int minimumTimeRequired\n(vector<int> &jobs, int k) {\n        int n = jobs.size();\n        vector<int> sum(1 << n);\n        for (int i = 1; i < (1 << \nn); i++) {\n            int x = __builtin_ctz\n(i), y = i - (1 << x);//x表示i后面有\n几个零，y表示第x位工作不做的情况\n            sum[i] = sum[y] + jobs\n[x];//表示 i状态工作总量为 y状态工作\n总量 + 第 x位工作量\n        }\n \n        vector<vector<int>> dp(k, \nvector<int>(1 << n));\n        for (int i = 0; i < (1 << \nn); i++) {\n            dp[0][i] = sum[i];\n        }//只有 1位工人，最小个人工时\n为总工时\n \n        for (int i = 1; i < k; i++)"}