{"text":"data","title":"1035. 不相交的线","qContent":"<p>在两条独立的水平线上按给定的顺序写下 <code>nums1</code> 和 <code>nums2</code> 中的整数。</p>\n\n<p>现在，可以绘制一些连接两个数字 <code>nums1[i]</code>&nbsp;和 <code>nums2[j]</code>&nbsp;的直线，这些直线需要同时满足满足：</p>\n\n<ul>\n\t<li>&nbsp;<code>nums1[i] == nums2[j]</code></li>\n\t<li>且绘制的直线不与任何其他连线（非水平线）相交。</li>\n</ul>\n\n<p>请注意，连线即使在端点也不能相交：每个数字只能属于一条连线。</p>\n\n<p>以这种方法绘制线条，并返回可以绘制的最大连线数。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n<strong><img style=\"height: 72px; width: 100px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/04/28/142.png\" alt=\"\"></strong>\n\n<pre><strong>输入：</strong>nums1 = <span id=\"example-input-1-1\">[1,4,2]</span>, nums2 = <span id=\"example-input-1-2\">[1,2,4]</span>\n<strong>输出：</strong><span id=\"example-output-1\">2</span>\n<strong>解释：</strong>可以画出两条不交叉的线，如上图所示。 \n但无法画出第三条不相交的直线，因为从 nums1[1]=4 到 nums2[2]=4 的直线将与从 nums1[2]=2 到 nums2[1]=2 的直线相交。\n</pre>\n\n<div>\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>nums1 = <span id=\"example-input-2-1\">[2,5,1,2,5]</span>, nums2 = <span id=\"example-input-2-2\">[10,5,2,1,5,2]</span>\n<strong>输出：</strong><span id=\"example-output-2\">3</span>\n</pre>\n\n<div>\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>nums1 = <span id=\"example-input-3-1\">[1,3,7,1,7,5]</span>, nums2 = <span id=\"example-input-3-2\">[1,9,2,5,1]</span>\n<strong>输出：</strong><span id=\"example-output-3\">2</span></pre>\n\n<p>&nbsp;</p>\n</div>\n</div>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums1.length &lt;= 500</code></li>\n\t<li><code>1 &lt;= nums2.length &lt;= 500</code></li>\n\t<li><code><font face=\"monospace\">1 &lt;= nums1[i], nums2[i] &lt;= 2000</font></code></li>\n</ul>\n\n<p>&nbsp;</p>\n","codeText":"class Solution {\npublic:\n    int maxUncrossedLines(vector<int>& nums1, \nvector<int>& nums2) {\n        //动态规划，存当前i,j位置的最大连线数量\n        int n1 = nums1.size(),n2 = nums2.size();\n        vector<vector<int>> dp(n1,vector<int>(n2,0));\n        for(int i=0;i<n1;++i){\n            for(int j=0;j<n2;++j){\n                int before = 0;\n                if(i!=0&&j!=0){\n                    before = dp[i-1][j-1];\n                }\n                if(nums1[i]==nums2[j]){\n                    dp[i][j] = before+1;\n                }else{\n                    dp[i][j] = before;\n                    if(i!=0){\n                        dp[i][j] = max(dp[i][j],dp[i-1]\n[j]);\n                    }\n                    if(j!=0){\n                        dp[i][j] = max(dp[i][j],dp[i]\n[j-1]);\n                    }\n                }\n            }"}